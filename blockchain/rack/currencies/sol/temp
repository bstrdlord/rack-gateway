package main

import (
	"context"
	"fmt"

	"github.com/davecgh/go-spew/spew"
	bin "github.com/gagliardetto/binary"
	"github.com/gagliardetto/solana-go"
	"github.com/gagliardetto/solana-go/programs/system"
	"github.com/gagliardetto/solana-go/rpc"
	confirm "github.com/gagliardetto/solana-go/rpc/sendAndConfirmTransaction"
	"github.com/gagliardetto/solana-go/rpc/ws"
	"github.com/shopspring/decimal"
)

func main() {

	r := Init()

	r = r
	// for range 1000 {
	// 	go func() {
	// 	}()
	// }

}

func Init() *rpc.Client {
	// account := solana.NewWallet()
	// fmt.Println(account.PublicKey())

	privkey, err := solana.PrivateKeyFromBase58("U9WYWsgQhvWYeKjLMeXxGynSrRKcCTDWoZY6zNoRgtqUoWFtL9iw2K8j9Qn6tB9q3x2hPR3cBX4JEfbDe7XZk7C")
	if err != nil {
		panic(err)
	}
	// if true {
	// 	account := solana.NewWallet()
	// 	fmt.Println(account.PublicKey(), "|", account.PrivateKey.String())
	// }

	var client *rpc.Client
	client = rpc.New(rpc.DevNet_RPC)

	sendTx(client, privkey)

	// getB(client)

	// out, err := client.RequestAirdrop(
	// 	context.TODO(),
	// 	pbc,
	// 	solana.LAMPORTS_PER_SOL*1,
	// 	rpc.CommitmentFinalized,
	// )
	// if err != nil {
	// 	panic(err)
	// }
	// fmt.Println("airdrop transaction signature:", out)

	return client
}

func getB(client *rpc.Client) {

	pbc := solana.MustPublicKeyFromBase58("BAefa4QP2gksnLhHnSGt9LTdDASRiM3x3kUUeEQjvqCE")

	res, err := client.GetBalance(context.Background(), pbc, rpc.CommitmentFinalized)
	if err != nil {

		// (*jsonrpc.RPCError)(0xc0029854a0)({
		// 	Code: (int) 429,
		// 	Message: (string) (len=82) "Too many requests from your IP, contact your app developer or support@rpcpool.com.",
		// 	Data: (interface {}) <nil>
		//    })

		fmt.Println(err)
		return
	}

	// Конвертация lamports в decimal.Decimal
	lamportsOnAccount := decimal.NewFromInt(int64(res.Value))
	const LAMPORTS_PER_SOL = 1e9

	// Деление lamports на LAMPORTS_PER_SOL для получения баланса в SOL
	solBalance := lamportsOnAccount.Div(decimal.NewFromFloat(LAMPORTS_PER_SOL))

	// Округление до 5 знаков после запятой (если необходимо)
	solBalance = solBalance.Round(5)

	// Вывод точного значения баланса в SOL
	fmt.Printf("◎ %s SOL\n", solBalance.String())

}

func sendTx(rpcClient *rpc.Client, wallet solana.PrivateKey) {

	wsClient, err := ws.Connect(context.Background(), rpc.DevNet_WS)
	if err != nil {
		panic(err)
	}

	recent, err := rpcClient.GetRecentBlockhash(context.TODO(), rpc.CommitmentFinalized)
	if err != nil {
		panic(err)
	}

	accountTo := solana.MustPublicKeyFromBase58("9eVraFo7pidgxsLbPa9QLPyhYEPLA5vgUZ9zZTpDmyDr")

	amount := uint64(3333)

	tx, err := solana.NewTransaction(
		[]solana.Instruction{
			system.NewTransferInstruction(
				amount,
				wallet.PublicKey(),
				accountTo,
			).Build(),
		},
		recent.Value.Blockhash,
		solana.TransactionPayer(wallet.PublicKey()),
	)
	if err != nil {
		panic(err)
	}

	_, err = tx.Sign(
		func(key solana.PublicKey) *solana.PrivateKey {
			if wallet.PublicKey().Equals(key) {
				return &wallet
			}
			return nil
		},
	)
	if err != nil {
		panic(fmt.Errorf("unable to sign transaction: %w", err))
	}
	// spew.Dump(tx)
	// // Pretty print the transaction:
	// tx.EncodeTree(text.NewTreeEncoder(os.Stdout, "Transfer SOL"))

	// Send transaction, and wait for confirmation:
	sig, err := confirm.SendAndConfirmTransaction(
		context.Background(),
		rpcClient,
		wsClient,
		tx,
	)
	if err != nil {
		panic(err)
	}

	//  get tx

	txSig := solana.MustSignatureFromBase58(sig.String())
	{
		out, err := rpcClient.GetTransaction(
			context.TODO(),
			txSig,
			&rpc.GetTransactionOpts{
				Encoding: solana.EncodingBase64,
			},
		)
		if err != nil {
			panic(err)
		}
		spew.Dump(out)
		spew.Dump(out.Transaction.GetBinary())

		decodedTx, err := solana.TransactionFromDecoder(bin.NewBinDecoder(out.Transaction.GetBinary()))
		if err != nil {
			panic(err)
		}
		spew.Dump(decodedTx)
	}
	{
		out, err := rpcClient.GetTransaction(
			context.TODO(),
			txSig,
			nil,
		)
		if err != nil {
			panic(err)
		}
		spew.Dump(out)
		tx, err := out.Transaction.GetTransaction()
		if err != nil {
			panic(err)
		}

		
	}

}
e